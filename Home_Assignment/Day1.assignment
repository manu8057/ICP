Problem number 1
Question ---->Minimum Number of Arrows to Burst Balloons(Leetcode 452)

solution of  1 problem :->

class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points,(a,b)->Integer.compare(a[1],b[1]));
        int ans=1;
        int a=points[0][0];
        int b=points[0][1];
        for(int i=1;i<points.length;i++){
            if(b>=points[i][0]){
                continue;
            }
            else{
                ans++;
                b=points[i][1];
            }
        }
        return ans;
    }
}


Problem number 2

Question ----->Sliding Window Maximum(Leetcode 239)

Soln number 2
--------------------
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        int arr[]=new int[n-k+1];
        Deque<Integer>q=new ArrayDeque<>();
        int id=0;
        for(int i=0;i<n;i++){
            while(!q.isEmpty() && q.peekFirst()<=i-k){
                q.pollFirst();
            }
            while(!q.isEmpty() && nums[q.peekLast()]<=nums[i]){
                q.pollLast();
            }
            q.add(i);
            if(i>=k-1) arr[id++]=nums[q.peekFirst()];
        }
        return arr;
    }
}



Problem number 3

Question--->Find First and Last Position of Element in Sorted Array(Leetcode 34)--->


soln number 3rd--->
-------------------------------------
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res=new int[2];
        res[0]=-1;
        res[1]=-1;
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                res[0]=mid;
                r=mid-1;
            }
            else if(nums[mid]<target){
                l++;
            }
            else{
                r--;
            }
        }
        if(res[0]==-1) return res;
        l=0;
        r=nums.length-1;
         while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                res[1]=mid;
                l=mid+1;
            }
            else if(nums[mid]<target){
                l++;
            }
            else{
                r--;
            }
        }
        return res;
    }
}