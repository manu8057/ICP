Problem number 1--------Minimum Number of Arrows to Burst Balloons (Leetcode 452)
--------------------------------------------------------------->
class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points,(a,b)->Integer.compare(a[1],b[1]));
        int ans=1;
        int a=points[0][0];
        int b=points[0][1];
        for(int i=1;i<points.length;i++){
            if(b>=points[i][0]){
                continue;
            }
            else{
                ans++;
                b=points[i][1];
            }
        }
        return ans;
    }
}

Problem number 2------------->Non-overlapping Intervals(LeetCode 435)-------->
---------------------------------------------------------------------------------------->
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int c=0;
        Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
        int b=intervals[0][1];
        for(int i=1;i<intervals.length;i++){
            int arr[]=intervals[i];
            if(arr[0]<b){
                c++;
            }
            else {
                b=arr[1];
            }
        }
        return c;
    }
}

Problem number 3------------------------->Boats to Save People (881)(Leetcode 881)
-------------------------------------------------------------------------------------------->
class Solution {
    public int numRescueBoats(int[] people, int limit) {
        int l=0;
        int r=people.length-1;
        int c=0;
        Arrays.sort(people);
        boolean vis[]=new boolean[people.length];
        while(l<r){
            int sum=people[l]+people[r];
            if(sum<=limit){
                c++;
                vis[l]=true;
                vis[r]=true;
                l++;
                r--;
            }
            else if(sum<limit){
                l++;
            }
            else{
                r--;
            }
        }
        for(int i=0;i<people.length;i++){
            if(!vis[i] && people[i]<=limit){
                c++;
            }
        }
        return c;
    }
}
Problem number 4------->Lemonade Change(LeetCode 860)------------------>
-----------------------------------------------------------------
class Solution {
    public boolean lemonadeChange(int[] bills) {
        int max=0;
        for(int i:bills){
            if(i>max) max=i;
        }
        int arr[]=new int[max+1];
        for(int i:bills){
            int x=i-5;
            if(x==0){
                arr[i]++;
                continue;
            }
            else if(x==5){
                if(arr[5]>=1){
                    arr[5]--;
                    arr[10]++;
                } else return false;
            }
            else if(x==15){
                if(arr[10]>=1 && arr[5]>=1){
                    arr[10]--;
                    arr[5]--;
                } else if(arr[5]>=3){
                    arr[5]-=3;
                } else return false;
            }
        }
        return true;
    }
}
