Problem number 1----------------------------->

Question------->Search a 2D Matrix(Leetcode 74)--------------------->
--------------------------------------------------------------------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i=0;i<matrix.length;i++){
            if(matrix[i][0]<=target && target<=matrix[i][m-1]){
                int l=0;
                int r=m-1;
                while(l<=r){
                    int mid=l+(r-l)/2;
                    if(matrix[i][mid]==target) return true;
                    else if(matrix[i][mid]>target) r=mid-1;
                    else l=mid+1;
                }
                return false;
            }
        }
        return false;
    }
}

Problem number 2------------------------------------>

Question------------------->Spiral Matrix(Leetcode 54).
------------------------------------------------------------------------------->
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer>l=new ArrayList<>();
        int r=0;
        int rn=matrix.length-1;
        int c=0;
        int cn=matrix[0].length-1;
        while(r<=rn && c<=cn){
            for(int i=c;i<=cn;i++){
                l.add(matrix[r][i]);
            }
            r++;
            for(int i=r;i<=rn;i++){
                l.add(matrix[i][cn]);
            }
            cn--;
            if(r<=rn){
                 for(int i=cn;i>=c;i--){
                     l.add(matrix[rn][i]);
                }
            }
            rn--;
            if(c<=cn){
                for(int i=rn;i>=r;i--){
                   l.add(matrix[i][c]);
                }
            }
            c++;
        }
        return l;
    }
}

Problem number 3--------------------------------------------->

Question----------->Number of Islands(LeetCode 200).
---------------------------------------------------------------------------------------

class Solution {
    public void fun(char[][] grid,int r,int c,int n,int m){
        if(r<0 || c<0 || r>=n || c>=m || grid[r][c]=='0'){
            return;
        }
        grid[r][c]='0';
        fun(grid,r+1,c,n,m);
        fun(grid,r,c-1,n,m);
        fun(grid,r-1,c,n,m);
        fun(grid,r,c+1,n,m);
    }
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    fun(grid,i,j,n,m);
                    ans++;
                }
            }
        }
        return ans;
    }
}