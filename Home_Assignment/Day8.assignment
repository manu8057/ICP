Problem number 1---> Evaluate Reverse Polish Notation(LeetCode 150)-------->
---------------------------------------------------------------------------->
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer>st=new Stack<>();
        for(String i:tokens){
            if(i.equals("+")){
                int a=st.pop();
                int b=st.pop();
                st.push(a+b);
            }
            else if(i.equals("*")){
                int a=st.pop();
                int b=st.pop();
                st.push(a*b);
            }
            else if(i.equals("/")){
                int a=st.pop();
                int b=st.pop();
                st.push(b/a);
            }
            else if(i.equals("-")){
                int a=st.pop();
                int b=st.pop();
                st.push(b-a);
            }
            else {
                st.push(Integer.parseInt(i));
            }
        }
        return st.pop();
    }
}

Problem number 2----Simplify Path(LeetCode 71)-->
------------------------------------------------------------>
class Solution {
    public String simplifyPath(String path) {
        String arr[] = path.split("/");
        Stack<String> st = new Stack<>();
        for (String i : arr) {
            if (i.equals("") || i.equals(".")) continue;
            else if (i.equals("..")) {
                if (!st.isEmpty()) st.pop();
            } else {
                st.push(i);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (String i : st) {
            sb.append("/");
            sb.append(i);
        }
        return sb.length()== 0?"/":sb.toString();
    }
}
